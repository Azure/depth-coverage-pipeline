steps:
- script: |
    echo "on dev env"
    echo "https://$(PIPELINE_USER):${PIPELINE_TOKEN}@github.com" > ~/.git-credentials
    sdktarget=$(TARGET)
    if [ "$sdktarget" == "terraform" ]; then
      cd $(Pipeline.Workspace)/s
      git clone --branch pipeline https://${PIPELINE_USER}:${PIPELINE_TOKEN}@github.com/${TF_ORG}/terraform-provider-azurerm.git
      cd $(Pipeline.Workspace)/s/terraform-provider-azurerm
      # git checkout -b depth-$(TARGET)-$(ResourceProvider)
      tf_existed_in_remote=$(git ls-remote --heads origin depth-$(TARGET)-$(ResourceProvider))
      if [[ -z ${tf_existed_in_remote} ]]; then
        git checkout -b depth-$(TARGET)-$(ResourceProvider)
      else
        git checkout depth-$(TARGET)-$(ResourceProvider)
      fi
    fi

    if [ "$sdktarget" == "clicore" ] || [ "$sdktarget" == "cliextension" ]; then
      cd $(Pipeline.Workspace)/s
      git clone https://${PIPELINE_USER}:${PIPELINE_TOKEN}@github.com/${CLI_ORG}/azure-cli
      cd $(Pipeline.Workspace)/s/azure-cli
      cli_existed_in_remote=$(git ls-remote --heads origin depth-$(TARGET)-$(ResourceProvider))
      if [[ -z ${cli_existed_in_remote} ]]; then
        echo "create branch"
        git checkout -b depth-$(TARGET)-$(ResourceProvider)
      else
        echo "checkout branch"
        git checkout depth-$(TARGET)-$(ResourceProvider)
      fi
    fi

    cd $(Pipeline.Workspace)/s
    git clone https://${PIPELINE_USER}:${PIPELINE_TOKEN}@github.com/$(Swagger_ORG)/azure-rest-api-specs.git
    ls -l
    cd $(Pipeline.Workspace)/s/azure-rest-api-specs
    # ls -l
    spec_existed_in_remote=$(git ls-remote --heads origin depth-$(TARGET)-$(ResourceProvider))
    if [[ -z ${spec_existed_in_remote} ]]; then
      git checkout -b depth-$(TARGET)-$(ResourceProvider)
    else
      git checkout depth-$(TARGET)-$(ResourceProvider)
    fi
    git config credential.helper store ; git config --global user.email "chunyu@microsoft.com";git config --global user.name "chunyu3;"
    git pull origin depth-$(TARGET)-$(ResourceProvider)
    cd $(Pipeline.Workspace)/s
  displayName: 'pull repo'
- script: |
    sudo npm install -g autorest@latest && sudo npm install -g typescript
  displayName: 'install autorest'
- bash: |
    echo "$README_FILE"
    pwd
    ls -l
    sdktarget=$(TARGET)
    if [ "$sdktarget" == "terraform" ]; then
      echo 'workOnTF'
      sudo npm install -g metadata-tool@3.0.5
      metadata-tool ./azure-rest-api-specs/$(README_FILE)
    fi

    if [ "$sdktarget" == "clicore" ] || [ "$sdktarget" == "cliextension" ]; then
      echo 'workonCLI'
      sudo npm install -g depthcoverage --unsafe-perm=true --allow-root
      sudo npm install -g autorest-autoconfig
      depthcoverage --token=$(PIPELINE_TOKEN) --org=$(PIPELINE_ORG) --repo=$(PIPELINE_REPO) --operation=read --PRNumber=$(System.PullRequest.PullRequestNumber)
      ls -l
      FILE=$(Pipeline.Workspace)/s/specification/$(ResourceProvider)/resource-manager/readme.az.md
      if [ -f "$FILE" ]; then
        echo "$FILE exists."
        cp "$FILE" $(Pipeline.Workspace)/s/azure-rest-api-specs/specification/$(ResourceProvider)/resource-manager/readme.az.md
      fi
      # ls -l ./azure-rest-api-specs/specification/$(ResourceProvider)/resource-manager
      # echo "./azure-rest-api-specs/specification/$(ResourceProvider)/resource-manager/readme.md"
      # echo "./azure-rest-api-specs/$(README_FILE)"
      # autorest --version=3.0.6271 --use=autorest-autoconfig@latest ./azure-rest-api-specs/$(README_FILE) --resource-file=./$(RESOURCE_MAP_FILE)
      autorest --version=3.0.6271 --use=autorest-autoconfig@latest --target-mode=core ./azure-rest-api-specs/specification/$(ResourceProvider)/resource-manager/readme.md --resource-file=./$(RESOURCE_MAP_FILE)
      # ls -l ./azure-rest-api-specs/specification/$(ResourceProvider)/resource-manager
      # cat ./azure-rest-api-specs/specification/$(ResourceProvider)/resource-manager/readme.az.md

      # echo "https://$(PIPELINE_USER):${PIPELINE_TOKEN}@github.com" > ~/.git-credentials
    fi

    if [ "$?" != "0" ]; then
      echo "failed to generate readme config file"
    else
      echo "readme config file generated"
      cd ./azure-rest-api-specs
      echo "https://$(PIPELINE_USER):${PIPELINE_TOKEN}@github.com" > ~/.git-credentials
      git config credential.helper store ; git config --global user.email "chunyu@microsoft.com";git config --global user.name "chunyu3;"
      git branch; git pull origin depth-$(TARGET)-$(ResourceProvider); git add -A; git commit -m "autogenerated"; git push origin depth-$(TARGET)-$(ResourceProvider);
    fi
  displayName: 'Generate or update configuration file'
- bash: |
    echo $pwd
    sdktarget=$(TARGET)
    if [ "$sdktarget" == "terraform" ]; then
      echo "start generate tf code"
      mkdir generated
      autorest --version=3.0.6219 --trenton --use=https://trenton.blob.core.windows.net/trenton/autorest-trenton-mockserver-test.tgz --generate-extra-acctest=true --trenton-output-folder=./generated ./azure-rest-api-specs/$(README_FILE) 1>codegen.log 2>&1
      
      if [ "$?" != "0" ]; then
        echo -e "\e[31m[$(date -u)] ERROR: [$(ResourceProvider)]: Generate code failed"
        # upload error log
        az login --service-principal -u $(SERVICE_PRINCIPE_ID) -p $(SERVICE_PRINCIPE_SECRET) --tenant $(SERVICE_PRINCIPE_TENANT)
        az storage blob upload -c depthcoverage -f codegen.log -n log/$(TARGET)-$(ResourceProvider)-$(Build.BuildId)-codegen.log --subscription $(SERVICE_PRINCIPE_SUBSCRIPTION) --account-name=depthcoverage
        exit 1
      fi
    fi

    if [ "$sdktarget" == "clicore" ] || [ "$sdktarget" == "cliextension" ]; then
      # cat ./azure-rest-api-specs/specification/$(ResourceProvider)/resource-manager/readme.az.md
      # autorest --version=3.0.6271 --az --use=@autorest/az@latest ./azure-rest-api-specs/$(README_FILE) --azure-cli-folder=./azure-cli  --target-mode=core
      autorest --version=3.0.6271 --az --use=https://trenton.blob.core.windows.net/trenton/autorest-az-1.7.3.tgz ./azure-rest-api-specs/$(README_FILE) --azure-cli-folder=./azure-cli  --target-mode=core --gen-cmdlet-test 1>codegen.log 2>&1
      if [ "$?" != "0" ]; then
        echo -e "\e[31m[$(date -u)] ERROR: [$(ResourceProvider)]: Generate code failed"
        az login --service-principal -u $(SERVICE_PRINCIPE_ID) -p $(SERVICE_PRINCIPE_SECRET) --tenant $(SERVICE_PRINCIPE_TENANT)
        az storage blob upload -c depthcoverage -f ../codegen.log -n log/$(TARGET)-$(ResourceProvider)-$(Build.BuildId)-codegen.log --subscription $(SERVICE_PRINCIPE_SUBSCRIPTION) --account-name=depthcoverage
        exit 1
      else
        cd ./azure-cli
        echo "https://$(PIPELINE_USER):${PIPELINE_TOKEN}@github.com" > ~/.git-credentials
        git config credential.helper store ; git config --global user.email "chunyu@microsoft.com";git config --global user.name "chunyu3;"
        git branch; git pull origin depth-$(TARGET)-$(ResourceProvider); git add -A; git commit -m "autogenerated"; git push origin depth-$(TARGET)-$(ResourceProvider);
      fi

      # az login --service-principal -u $(SERVICE_PRINCIPE_ID) -p $(SERVICE_PRINCIPE_SECRET) --tenant $(SERVICE_PRINCIPE_TENANT)
      # az storage blob upload -c depthcoverage -f ../codegen.log -n log/$(TARGET)-$(ResourceProvider)-$(Build.BuildId)-codegen.log --subscription $(SERVICE_PRINCIPE_SUBSCRIPTION) --account-name=depthcoverage

      # cd ./azure-cli
      # echo "https://$(PIPELINE_USER):${PIPELINE_TOKEN}@github.com" > ~/.git-credentials
      # git config credential.helper store ; git config --global user.email "chunyu@microsoft.com";git config --global user.name "chunyu3;"
      # git branch; git pull origin depth-$(TARGET)-$(ResourceProvider); git add -A; git commit -m "autogenerated"; git push origin depth-$(TARGET)-$(ResourceProvider);
    fi
  displayName: 'Generate code'