steps:
- script: |
    # pull sdk repo
    echo "https://$(PIPELINE_USER):$(PIPELINE_TOKEN)@github.com" > ~/.git-credentials
    sdktarget=$(TARGET)
    repo=""
    base=""

    if [ "$sdktarget" == "clicore" ]; then
      cd $(Pipeline.Workspace)/s
      git clone --branch $(CLI_BRANCH) https://$(PIPELINE_USER):$(PIPELINE_TOKEN)@github.com/$(CLI_ORG)/azure-cli
      repo="azure-cli"
      base="dev"
    fi

    if [ "$sdktarget" == "cliextension" ]; then
      cd $(Pipeline.Workspace)/s
      git clone --branch $(CLI_EXTENSION_BRANCH) https://$(PIPELINE_USER):$(PIPELINE_TOKEN)@github.com/$(CLI_ORG)/azure-cli-extensions
      repo="azure-cli-extensions"
      base="master"
    fi

    cd $(Pipeline.Workspace)/s/$repo
    tf_existed_in_remote=$(git ls-remote --heads origin $(WORKBRANCH))
    if [[ -z ${tf_existed_in_remote} ]]; then
      git checkout -b $(WORKBRANCH)
    else
      git checkout $(WORKBRANCH)
      # git reset --hard origin/$(WORKBRANCH)
      # git reset --hard origin/$base
    fi

    #pull swagger repo
    cd $(Pipeline.Workspace)/s
    git clone --branch $(Swagger_BRANCH) https://$(PIPELINE_USER):$(PIPELINE_TOKEN)@github.com/$(Swagger_ORG)/azure-rest-api-specs.git
    ls -l

    # upload to azure-rest-api-specs branch
    cd $(Pipeline.Workspace)/s/azure-rest-api-specs
    spec_existed_in_remote=$(git ls-remote --heads origin $(WORKBRANCH)
    if [[ -z ${spec_existed_in_remote} ]]; then
      git checkout -b $(WORKBRANCH)
    else
      git checkout $(WORKBRANCH)
      # git reset --hard origin/master
    fi
    git config credential.helper store ; git config --global user.email "chunyu@microsoft.com";git config --global user.name "chunyu3;"
    git pull origin $(WORKBRANCH)
    cd $(Pipeline.Workspace)/s
  displayName: 'pull repo'
- script: |
    sudo npm install -g autorest@latest && sudo npm install -g typescript
  displayName: 'install autorest'
- bash: |
    echo "$README_FILE"
    pwd
    ls -l
    sdktarget=$(TARGET)

    if [ "$sdktarget" == "clicore" ] || [ "$sdktarget" == "cliextension" ]; then
      echo 'workonCLI'
      sudo npm install -g depthcoverage --unsafe-perm=true --allow-root
      sudo npm install -g autorest-autoconfig
      depthcoverage --token=$(PIPELINE_TOKEN) --org=$(PIPELINE_ORG) --repo=$(PIPELINE_REPO) --operation=read --PRNumber=$(System.PullRequest.PullRequestNumber)
      ls -l
      FILE=$(Pipeline.Workspace)/s/specification/$(ResourceProvider)/resource-manager/readme.az.md
      if [ -f "$FILE" ]; then
        echo "$FILE exists."
        cp "$FILE" $(Pipeline.Workspace)/s/azure-rest-api-specs/specification/$(ResourceProvider)/resource-manager/readme.az.md
      fi

      if [ "$sdktarget" == "clicore" ]; then
       autorest --version=3.0.6271 --use=autorest-autoconfig@latest --target-mode=core ./azure-rest-api-specs/specification/$(ResourceProvider)/resource-manager/readme.md --resource-file=./$(RESOURCE_MAP_FILE)
      else
        # cli-extension
        autorest --version=3.0.6271 --use=autorest-autoconfig@latest ./azure-rest-api-specs/specification/$(ResourceProvider)/resource-manager/readme.md --resource-file=./$(RESOURCE_MAP_FILE) --package-$(ResourceProvider)
      fi
    fi
    
    if [ "$?" != "0" ]; then
      echo "failed to generate readme config file"
    else
      echo "readme config file generated"
      cd ./azure-rest-api-specs
      echo "https://$(PIPELINE_USER):$(PIPELINE_TOKEN)@github.com" > ~/.git-credentials
      git config credential.helper store ; git config --global user.email "chunyu@microsoft.com";git config --global user.name "chunyu3;"
      git branch; git pull origin $(WORKBRANCH); git add -A; git commit -m "autogenerated"; git push origin $(WORKBRANCH);
    fi
  displayName: 'Generate or update configuration file'
- bash: |
    mkdir -p $(Pipeline.Workspace)/sdk/sdkvariables
    sdktarget=$(TARGET)
    if [ "$sdktarget" == "terraform" ]; then
      # PACKAGE_NAME=`cat $(Pipeline.Workspace)/s/azure-rest-api-specs/specification/$(ResourceProvider)/resource-manager/readme.terraform.md | grep "cli-name"| awk -F':' '{print $2}' | tr -d '[[:space:]]'`
      PACKAGE_NAME=`cat $(Pipeline.Workspace)/s/azure-rest-api-specs/specification/$(ResourceProvider)/resource-manager/readme.terraform.md | grep "terraform-output-folder" | sed 's/output-folder: \$(terraform-output-folder)\///g'`
      af="generated/$PACKAGE_NAME"
      echo "PACKAGE_NAME:$PACKAGE_NAME"
      echo "##vso[task.setvariable variable=Package]$PACKAGE_NAME"
      echo "$PACKAGE_NAME" > $(Pipeline.Workspace)/sdk/sdkvariables/Package

      echo "##vso[task.setvariable variable=Artifact]$af"
      echo "$af" > $(Pipeline.Workspace)/sdk/sdkvariables/Artifact
    fi
  displayName: 'set sdk variable'
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Pipeline.Workspace)/sdk'
    artifact: 'sdkvariables'
    publishLocation: 'pipeline'
- bash: |
    sudo npm install -g oav@2.4.0 --unsafe-perm=true --allow-root
    sudo npm install -g depthcoverage --unsafe-perm=true --allow-root
    depthcoverage --token=$(PIPELINE_TOKEN) --org=$(PIPELINE_ORG) --repo=$(PIPELINE_REPO) --operation=read --PRNumber=$(System.PullRequest.PullRequestNumber)

    # example genertion command: oav generate-examples [PATH]
    # for i in $(jq -c .jsonFilelist[] $(RESOURCE_MAP_FILE) | sed -e 's/^"//' -e 's/"$//'); do oav generate-examples $(Pipeline.Workspace)/s/azure-rest-api-specs$i;done
    bash ./scripts/bash/generateExample.sh $(RESOURCE_MAP_FILE) $(Pipeline.Workspace) 1>generateExample.log 2>&1

    # submit Generated example
    if [ "$?" != "0" ]; then
      echo "failed to generate examples"
      # upload error log
      az login --service-principal -u $(SERVICE_PRINCIPE_ID) -p $(SERVICE_PRINCIPE_SECRET) --tenant $(SERVICE_PRINCIPE_TENANT)
      az storage blob upload -c depthcoverage -f $(TASK_KEY).log -n log/$(CodeGenerationName)-$(Build.BuildId)-$(TASK_KEY).log --subscription $(SERVICE_PRINCIPE_SUBSCRIPTION) --account-name=depthcoverage
      # exit 1
    else
      echo "examples generated"
      cd $(Pipeline.Workspace)/s/azure-rest-api-specs
      echo "https://$(PIPELINE_USER):$(PIPELINE_TOKEN)@github.com" > ~/.git-credentials
      git config credential.helper store ; git config --global user.email "chunyu@microsoft.com";git config --global user.name "chunyu3;"
      git branch; git pull origin $(WORKBRANCH); git add -A; git commit -m "autogenerated"; git push origin $(WORKBRANCH);
    fi
  displayName: 'Generate Example'
- bash: |
    set -x
    echo $pwd
    sdktarget=$(TARGET)
    codefolder="";

    if [ "$sdktarget" == "clicore" ]; then
      echo "start to generate cli core code"
      codefolder="./azure-cli"
      autorest --version=3.0.6271 --az --use=https://trenton.blob.core.windows.net/trenton/autorest-az-1.7.3.tgz ./azure-rest-api-specs/$(README_FILE) --azure-cli-folder=./azure-cli --target-mode=core --gen-cmdlet-test 1>$(TASK_KEY).log 2>&1
    fi

    if [ "$sdktarget" == "cliextension" ]; then
      echo "start to generate cli extension code"
      codefolder="./azure-cli-extensions"
      autorest --version=3.0.6271 --az --use=https://trenton.blob.core.windows.net/trenton/autorest-az-1.7.3.tgz ./azure-rest-api-specs/$(README_FILE) --azure-cli-extension-folder=./azure-cli-extensions --gen-cmdlet-test 1>$(TASK_KEY).log 2>&1
    fi

    if [ "$?" != "0" ]; then
      echo -e "\e[31m[$(date -u)] ERROR: [$(ResourceProvider)]: Generate code failed"
      # upload error log
      az login --service-principal -u $(SERVICE_PRINCIPE_ID) -p $(SERVICE_PRINCIPE_SECRET) --tenant $(SERVICE_PRINCIPE_TENANT)
      az storage blob upload -c depthcoverage -f $(TASK_KEY).log -n log/$(TARGET)-$(ResourceProvider)-$(Build.BuildId)-$(TASK_KEY).log --subscription $(SERVICE_PRINCIPE_SUBSCRIPTION) --account-name=depthcoverage
      echo "##vso[task.setvariable variable=Task_Result]failure"
      exit 1
    else
      cd $codefolder
      echo "https://$(PIPELINE_USER):$(PIPELINE_TOKEN)@github.com" > ~/.git-credentials
      git config credential.helper store ; git config --global user.email "chunyu@microsoft.com";git config --global user.name "chunyu3;"
      git branch; git pull origin $(WORKBRANCH); git add -A; git commit -m "autogenerated"; git push origin $(WORKBRANCH);
    fi
  displayName: 'Generate code'