# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
pool:
  vmImage: 'Ubuntu 20.04'

variables:
- template: Variables.yml
- name: PIPELINE_ORG
  value: Azure
- name: PIPELINE_REPO
  value: depth-coverage-pipeline
- name: PULL_NUMBER
  value: $(System.PullRequest.PullRequestNumber)
- name: ResourceProvider
  value: empty
- name: Resource
  value: ""
- name: ResourceMapJson
  value: ""
- name: RESOURCE_MAP_FILE
  value: ToGenerate.json
- name: README_FILE
  value: ""
- name: TARGET
  value: clicore
- name: OnboardType
  value: depth
- name: AlertInstruction
  value: ""
- name: NotifyUsers
  value: ""
- name: Artifcact
  value: ""
- name: CODE_PULLREQUEST
  value: ""
stages:
- stage: setup
  jobs:
  # - job: controlappserver
  #   steps:
  #   - script: |
  #       curl -X GET http://10.172.15.142:3000
  - job: config
    variables:
      TASK_KEY: config
    steps:
    - script: |
        sudo npm install -g depthcoverage --unsafe-perm=true --allow-root
        sudo apt-get install jq -y
      displayName: 'prepare'
    - script: |
        echo $(SDK)
        depthcoverage --token=$(PIPELINE_TOKEN) --org=$(PIPELINE_ORG) --repo=$(PIPELINE_REPO) --operation=read --PRNumber=$(System.PullRequest.PullRequestNumber)
        ls -l
        # rp=`jq .RPName $(RESOURCE_MAP_FILE)`
      displayName: 'Get resource config file'
    - pwsh: |
        $jsonfile=$env:RESOURCE_MAP_FILE
        echo $jsonfile
        $data = Get-content $jsonfile | ConvertFrom-Json
        $name=$data.RPName
        
        $readmefile=$data.readmeFile
        $target=$data.target

        $ignore=$data.ignoreFailures
        $excludeStages=$data.excludeStages
        echo "excludeStages:$excludeStages"

        echo "target: $target"
        
        $tag=$data.tag;
        echo "tag:$tag"

        $resources=$data.resourcelist;
        echo "resources:$resources"

        $onboardType=$data.onboardType
        echo "onboardType:$onboardType"

        Write-Host "##vso[task.setvariable variable=ResourceProvider]$name"
        Write-Host "##vso[task.setvariable variable=README_FILE]$readmefile"
        Write-Host "##vso[task.setvariable variable=TARGET]$target"
        Write-Host "##vso[task.setvariable variable=TAG]$tag"
        Write-Host "##vso[task.setvariable variable=RESOURCES]$resources"
        Write-Host "##vso[task.setvariable variable=OnboardType]$onboardType"
        $af=""
        $packagename=""
        if($target -eq "terraform") {
          # $af="generated/$name ./go/src/github.com/terraform-providers/terraform-provider-azurerm/vendor/github.com/Azure/azure-sdk-for-go/services/$name"
          $af="generated/$name"
          $packagename=$name
        } else {
          if($name -eq "compute") {
            $af="./azure-cli/src/azure-cli/azure/cli/command_modules/vm ./azure-cli/src/azure-cli/requirements*.txt ./azure-cli/doc/sphinx/azhelpgen/doc_source_map.json ./azure-rest-api-specs/specification/$name/resource-manager/readme.az.md"
            $packagename="vm"
          } else {
            $af="./azure-cli/src/azure-cli/azure/cli/command_modules/$name ./azure-cli/src/azure-cli/requirements*.txt ./azure-cli/doc/sphinx/azhelpgen/doc_source_map.json ./azure-rest-api-specs/specification/$name/resource-manager/readme.az.md"
            $packagename=$name
          }
        }
        echo "artifat:$af"
        Write-Host "##vso[task.setvariable variable=Artifcact]$af"
        Write-Host "##vso[task.setvariable variable=Package]$packagename"

        Write-Host "##vso[task.setvariable variable=ignore;isOutput=true]$ignore;TestFailure"
        Write-Host "##vso[task.setvariable variable=excludestages;isOutput=true]$excludeStages"

        $stages="$(stages)"
        if($excludeStages -ne $null) {
          $stagesArray=$stages.Split(";")
          $excludeArray=$excludeStages.Split(";")
          foreach ($element in $excludeArray) {
            $stagesArray = $stagesArray | Where-Object {$_ -ne $element}
          }
          $stages=$stagesArray -join ";"
        }
        echo "stages:$stages"
        Write-Host "##vso[task.setvariable variable=stages;isOutput=true]$stages"
      name: configResource
      displayName: "Set variable"
    - script: echo $(ResourceProvider)
      displayName: "Get variable"
    - script: |
        mkdir -p $(Pipeline.Workspace)/variables
        echo "$(ResourceProvider)" > $(Pipeline.Workspace)/variables/ResourceProvider
        echo "$(README_FILE)" > $(Pipeline.Workspace)/variables/README_FILE
        echo "$(TARGET)" > $(Pipeline.Workspace)/variables/TARGET
        echo "$(TAG)" > $(Pipeline.Workspace)/variables/TAG
        echo "$(RESOURCES)" > $(Pipeline.Workspace)/variables/RESOURCES
        echo "$(OnboardType)" > $(Pipeline.Workspace)/variables/OnboardType
        echo "$(Artifcact)" > $(Pipeline.Workspace)/variables/Artifact
        echo "$(Package)" > $(Pipeline.Workspace)/variables/Package
        
        echo ""
        ls -l $(Pipeline.Workspace)/variables
      displayName: "publish variable"
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)'
        artifact: 'variables'
        publishLocation: 'pipeline'
- stage: GenerateCode
  dependsOn: setup
  condition: succeeded()
  jobs:
  - job: GenerateJob
    variables:
      TASK_KEY: GenerateJob
      Contactors: "chunyu@microsoft.com;vsccodegen@microsoft.com"
    steps:
    - template: .azure-pipelines/templates/VariableSetTask.yml
    - template: .azure-pipelines/templates/${{variables.SDK}}/GenerateCode.yml
    - bash: |
        sdktarget=$(TARGET)
        if [ "$sdktarget" == "terraform" ]; then
          echo "##vso[task.setvariable variable=tobuild;isOutput=true]Yes"
        else
          echo "##vso[task.setvariable variable=tobuild;isOutput=true]No"
        fi
      displayName: "set output variable"
      name: DetermineResult
    - template: .azure-pipelines/templates/UploadCode.yml
    - template: .azure-pipelines/templates/AfterTask.yml
  - job: CodeGenerationFailureAlert
    condition: failed()
    variables:
      TASK_KEY: CodeGenerationnFailureAlert
      Contactors: "chunyu@microsoft.com;vsccodegen@microsoft.com"
    steps:
    - template: .azure-pipelines/templates/VariableSetTask.yml
    - template: .azure-pipelines/templates/IssueAlertTask.yml
- ${{ if contains(variables['stages'],'Build') }}:
  - stage: Build
    dependsOn: GenerateCode
    condition: and(succeeded(), eq(stageDependencies.GenerateCode.outputs['GenerateJob.DetermineResult.tobuild'], 'Yes'))
    jobs:
    - job: build
      variables:
        TASK_KEY: build
        Contactors: "chunyu@microsoft.com;vsccodegen@microsoft.com"
      steps:
      - template: .azure-pipelines/templates/BeforeTask.yml
      - template: .azure-pipelines/templates/${{variables.SDK}}/Build.yml
      - template: .azure-pipelines/templates/AfterTask.yml
    - job: BuildFailureAlert
      dependsOn: build
      condition: failed()
      variables:
        TASK_KEY: BuildFailureAlert
        Contactors: "chunyu@microsoft.com;vsccodegen@microsoft.com"
      steps:
      - template: .azure-pipelines/templates/VariableSetTask.yml
      - template: .azure-pipelines/templates/GenerateCodePR.yml
      - template: .azure-pipelines/templates/IssueAlertTask.yml
- ${{ if contains(variables['stages'],'MockTest') }}:
  - stage: MockTest
    dependsOn:
    - setup
    - GenerateCode
    - ${{ if contains(variables['stages'],'Build') }}:
      - Build
    condition: and (not(contains(stageDependencies.setup.outputs['config.configResource.excludestages'], 'MockTest')), succeeded())
    jobs:
    - job: MockTestJob
      variables:
        TASK_KEY: MockTest
        Contactors: "chunyu@microsoft.com;vsccodegen@microsoft.com"
      steps:
      - template: .azure-pipelines/templates/BeforeTask.yml
      - template: .azure-pipelines/templates/${{variables.SDK}}/SetupTestEnv.yml
      - template: .azure-pipelines/templates/${{variables.SDK}}/SetupMockServerEnv.yml
      - template: .azure-pipelines/templates/${{variables.SDK}}/RunMockTest.yml
      - template: .azure-pipelines/templates/AfterTask.yml
      displayName: MockTest
    - job: MockTestFailureAlert
      variables:
        TASK_KEY: MockTest
        Contactors: "chunyu@microsoft.com;vsccodegen@microsoft.com"
      dependsOn:
      - MockTestJob
      condition: failed('MockTestJob')
      steps:
      - template: .azure-pipelines/templates/VariableSetTask.yml
      - template: .azure-pipelines/templates/GenerateCodePR.yml
      - template: .azure-pipelines/templates/IssueAlertTask.yml
- ${{ if contains(variables['stages'],'LiveTest') }}:
  - stage: LiveTest
    dependsOn:
    - setup
    - MockTest
    condition: and(not(contains(stageDependencies.setup.outputs['config.configResource.excludestages'], 'LiveTest')), or(succeeded('MockTest'), contains(stageDependencies.setup.outputs['config.configResource.ignore'], 'TestFailure')))
    jobs:
    - job: LiveTestJob
      variables:
        TASK_KEY: LiveTestJob
      steps:
      - script: echo 'CLILiveTest'
      - template: .azure-pipelines/templates/BeforeTask.yml
      - template: .azure-pipelines/templates/${{variables.SDK}}/SetupTestEnv.yml
      - template: .azure-pipelines/templates/${{variables.SDK}}/RunLiveTest.yml
      - template: .azure-pipelines/templates/AfterTask.yml
      displayName: LiveTest
    - job: LiveTestFailureAlert
      variables:
        TASK_KEY: LiveTest
        Contactors: "chunyu@microsoft.com;vsccodegen@microsoft.com"
      dependsOn:
      - LiveTestJob
      condition: failed('LiveTestJob')
      steps:
      - template: .azure-pipelines/templates/VariableSetTask.yml
      - template: .azure-pipelines/templates/GenerateCodePR.yml
      - template: .azure-pipelines/templates/IssueAlertTask.yml
- ${{ if contains(variables['stages'],'Submit') }}:
  - stage: Submit
    jobs:
    - job: submitJob
      steps:
      - template: .azure-pipelines/templates/BeforeTask.yml
      - bash: |
          echo $(Pipeline.Workspace)
          pwd

          echo "https://$(PIPELINE_USER):$(PIPELINE_TOKEN)@github.com" > ~/.git-credentials
          sdktarget=$(TARGET)
          if [ "$sdktarget" == "terraform" ]; then
            git clone --branch $(OnboardType)-$(TARGET)-$(ResourceProvider) https://$(PIPELINE_USER):$(PIPELINE_TOKEN)@github.com/$(TF_ORG)/terraform-provider-azurerm.git
            cd ./terraform-provider-azurerm
          fi

          if [ "$sdktarget" == "clicore" ] || [ "$sdktarget" == "cliextension" ]; then
            git clone --branch $(OnboardType)-$(TARGET)-$(ResourceProvider) https://$(PIPELINE_USER):$(PIPELINE_TOKEN)@github.com/$(CLI_ORG)/azure-cli
            cd ./azure-cli
          fi

          git config credential.helper store; git config --global user.email "chunyu@microsoft.com";git config --global user.name "chunyu3;"
          git branch; git add -A; git commit -m "autogenerated"; git push origin $(OnboardType)-$(TARGET)-$(ResourceProvider);
        displayName: 'Generate pull request'
    - job: confirm
      dependsOn: submitJob
      condition: succeeded()
      displayName: confirm submit or customize
      steps:
      - template: .azure-pipelines/templates/VariableSetTask.yml
      - template: .azure-pipelines/templates/GenerateCodePR.yml
      - bash: |
          cd $(Pipeline.Workspace)/s
          codePR=$(CODE_PULLREQUEST)

          sdktarget=$(TARGET)

          org=""
          repo=""
          base="master"
          sdk="";
          if [ "$sdktarget" == "terraform" ]; then
            org=$(TF_ORG)
            repo="terraform-provider-azurerm"
            sdk="terraform"
            base="pipeline"
          fi

          if [ "$sdktarget" == "clicore" ]; then
            org=$(CLI_ORG)
            repo="azure-cli"
            base="dev"
            sdk="clicore"
          fi

          if [ "$sdktarget" == "cliextension" ]; then
            org=$(CLI_ORG)
            repo="azure-cli-extensions"
            base="master"
            sdk="cliextension"
          fi

          onboardtype=$(OnboardType)
          baseAPI="codegenerate"
          if [ "$onboardtype" == "depth" ]; then
            baseAPI="depthCoverage"
          fi

          triggerPR="https://github.com/Azure/depth-coverage-pipeline/pull/$(System.PullRequest.PullRequestNumber)"
          submitURL="http://$(CodegenApp_Server)/$baseAPI/resourceProvider/$(ResourceProvider)/sdk/$sdk/onboard?swaggerorg=$(Swagger_ORG)&org=$org"
          customizeURL="http://$(CodegenApp_Server)/$baseAPI/resourceProvider/$(ResourceProvider)/sdk/$sdk/customize?triggerPR=$triggerPR&codePR=$codePR&org=$org"
          

          
          python scripts/onboard.py "Onboarding" "$(TARGET) Onboarding $(ResourceProvider) confirm" "$codePR" "$triggerPR" "$submitURL" "$customizeURL" > scripts/email.html
          echo "start of email"
          cat scripts/email.html
          echo "end of email"
          # to_mail="chunyu@microsoft.com"
          if [ "$sdktarget" == "terraform" ]; then
            to_mail="tfazengvsc@microsoft.com;chunyu@microsoft.com;vsccodegen@microsoft.com"
          else
            to_mail="AzCLIInternal@microsoft.com;chunyu@microsoft.com;vsccodegen@microsoft.com"
          fi
          plateform=$(PLATEFORM)
          echo "plateform: $plateform"
          if [ "$plateform" == "dev" ]; then
            to_mail="chunyu@microsoft.com"
          fi
          
          echo "to_mail: $to_mail"
          echo "cc_mail: $cc_mail"

          sudo pip install wheel
          sudo pip install sendgrid
          python scripts/sendGridemail.py "scripts/email.html" $to_mail "Depth-coverage Onboarding Confirm" $(API_KEY)
          echo "end of send email"
        displayName: "send confirm email"
