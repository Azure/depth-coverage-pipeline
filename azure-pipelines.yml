# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
- name: PIPELINE_ORG
  value: Azure
- name: PIPELINE_REPO
  value: depth-coverage-pipeline
- name: PULL_NUMBER
  value: $(System.PullRequest.PullRequestNumber)
- name: ResourceProvider
  value: empty
- name: Resource
  value: ""
- name: ResourceMapJson
  value: ""
- name: RESOURCE_MAP_FILE
  value: ToGenerate.json
- name: README_FILE
  value: ""
- name: TARGET
  value: TF
- name: AlertInstruction
  value: ""
- name: NotifyUsers
  value: ""
- name: Artifcact
  value: ""

stages:
- stage: setup
  jobs:
  - job: config
    steps:
    - script: |
        sudo npm install -g az-depth-coverage --unsafe-perm=true --allow-root
        sudo apt-get install jq -y
      displayName: 'prepare'
    - script: |
        depthcoverage --token=$(PIPELINE_TOKEN) --org=$(PIPELINE_ORG) --repo=$(PIPELINE_REPO) --operation=readPR --PRNumber=6
        # rp=`jq .RPName $(RESOURCE_MAP-FILE)`
        # echo $rp
        # echo '##vso[task.setvariable variable=ResourceProvider]${rp}'
      displayName: 'Get resource config file'
    - pwsh: |
        $jsonfile=$env:RESOURCE_MAP_FILE
        echo $jsonfile
        $data = Get-content $jsonfile | ConvertFrom-Json
        echo $data
        $name=$data.RPName
        $readmefile=$data.readmeFile
        Write-Host "##vso[task.setvariable variable=ResourceProvider;isOutput=true]$name"
        Write-Host "##vso[task.setvariable variable=README_FILE;isOutput=true]$readmefile"
      displayName: "Set variable"
    - script: echo $(ResourceProvider)
      displayName: "Get variable"
- stage: GenerateCode
  dependsOn: setup
  condition: succeeded()
  jobs:
  - job: GenerateJob
    variables:
    - name: TASK_KEY
      value: GenerateCode
    steps:
    - template: .azure-pipelines/templates/Generate${{variables.TARGET}}.yml
    - template: .azure-pipelines/templates/AfterTask.yml
  - job: ConfigAlert
    dependsOn: GenerateJob
    condition: failed()
    displayName: "config alert"
    steps:
    - pwsh: |
        $notify="chunyu@microsoft.com"
        $instruction='Failed to generate code. Please check the codgen tool.'
        Write-Host "##vso[task.setvariable variable=NotifyUsers;isOutput=true]$nofity"
        Write-Host "##vso[task.setvariable variable=AlertInstruction;isOutput=true]$instruction"
        echo $(NotifyUsers)
  - job: alert
    dependsOn: ConfigAlert
    condition: succeeded()
    displayName: Wait for external validation  
    pool: server    
    timeoutInMinutes: 4320 # job times out in 3 days
    steps:
    - template: .azure-pipelines/templates/AlertTask.yml
- stage: Build
  dependsOn: GenerateCode
  condition: succeeded()
  jobs:
  - job: build
    steps:
    - template: .azure-pipelines/templates/BeforeTask.yml
- stage: MockTest
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: MockTest
    steps:
    - script: echo 'MockTest'
    displayName: MockTest
- stage: LiveTest
  dependsOn: MockTest
  condition: succeeded()
  jobs:
  - job: LiveTest
    steps:
    - script: echo 'LiveTest'
    displayName: LiveTest
- stage: Submit
  dependsOn: LiveTest
  condition: succeeded()
  jobs:
  - job: submit
    steps:
    - script: echo 'submit code to code repo'