# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
- name: PIPELINE_ORG
  value: Azure
- name: PIPELINE_REPO
  value: depth-coverage-pipeline
- name: PULL_NUMBER
  value: $(System.PullRequest.PullRequestNumber)
- name: ResourceProvider
  value: empty
- name: Resource
  value: ""
- name: ResourceMapJson
  value: ""
- name: RESOURCE_MAP_FILE
  value: ToGenerate.json
- name: README_FILE
  value: ""
- name: TARGET
  value: TF
- name: AlertInstruction
  value: ""
- name: NotifyUsers
  value: ""
- name: Artifcact
  value: ""

stages:
- stage: setup
  jobs:
  # - job: controlappserver
  #   steps:
  #   - script: |
  #       curl -X GET http://10.172.15.142:3000
  - job: config
    steps:
    - script: |
        sudo npm install -g az-depth-coverage --unsafe-perm=true --allow-root
        sudo apt-get install jq -y
      displayName: 'prepare'
    - script: |
        depthcoverage --token=$(PIPELINE_TOKEN) --org=$(PIPELINE_ORG) --repo=$(PIPELINE_REPO) --operation=readPR --PRNumber=6
        # rp=`jq .RPName $(RESOURCE_MAP_FILE)`
        # echo $rp
        # echo '##vso[task.setvariable variable=ResourceProvider]$rp'
      displayName: 'Get resource config file'
    - pwsh: |
        $jsonfile=$env:RESOURCE_MAP_FILE
        echo $jsonfile
        $data = Get-content $jsonfile | ConvertFrom-Json
        echo $data
        $name=$data.RPName
        $readmefile=$data.readmeFile
        $target=$data.target
        echo $target
        Write-Host "##vso[task.setvariable variable=ResourceProvider]$name"
        Write-Host "##vso[task.setvariable variable=README_FILE]$readmefile"
        Write-Host "##vso[task.setvariable variable=TARGET]$target"
      name: configResource
      displayName: "Set variable"
    - script: echo $(ResourceProvider)
      displayName: "Get variable"
    - script: |
        mkdir -p $(Pipeline.Workspace)/variables
        echo "$(ResourceProvider)" > $(Pipeline.Workspace)/variables/ResourceProvider
        echo "$(README_FILE)" > $(Pipeline.Workspace)/variables/README_FILE
        echo "$(TARGET)" > $(Pipeline.Workspace)/variables/TARGET
        ls -l $(Pipeline.Workspace)/variables
      displayName: "publish variable"
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)'
        artifact: 'variables'
        publishLocation: 'pipeline'
- stage: GenerateCode
  dependsOn: setup
  condition: succeeded()
  jobs:
  - job: GenerateJob
    # variables:
    #   ResourceProvider: $[dependencies.config.outputs['configResource.ResourceProvider']]
    #   README_FILE: $[dependencies.config.outputs['configResource.README_FILE']]
    #   TASK_KEY: "GenerateCode"
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'variables'
        targetPath: '$(Pipeline.Workspace)'
    - script: |
        ResourceProvider=$(cat $(Pipeline.Workspace)/variables/ResourceProvider)
        echo "##vso[task.setvariable variable=ResourceProvider]$ResourceProvider"
        
        README_FILE=$(cat $(Pipeline.Workspace)/variables/README_FILE)
        echo "##vso[task.setvariable variable=README_FILE]$README_FILE"

        target=$(cat $(Pipeline.Workspace)/variables/TARGET)
        echo "##vso[task.setvariable variable=TARGET]$target"

        echo $(ResourceProvider)
        echo $(target)
        echo 'end'
    - template: .azure-pipelines/templates/GenerateCode.yml
    - template: .azure-pipelines/templates/AfterTask.yml
  - job: ConfigAlertJob
    dependsOn: GenerateJob
    condition: failed()
    displayName: "config alert"
    steps:
    - pwsh: |
        $notify="chunyu@microsoft.com"
        $instruction='Failed to generate tf code. Please check the codgen tool.'
        Write-Host "##vso[task.setvariable variable=NotifyUsers;isOutput=true]$nofity"
        Write-Host "##vso[task.setvariable variable=AlertInstruction;isOutput=true]$instruction"
        echo $env:NotifyUsers
      name: configAlertStep
  - job: alert
    dependsOn: ConfigAlertJob
    condition: always()
    displayName: Wait for external validation
    variables:
      NotifyUsers: $[dependencies.ConfigAlertJob.outputs['configAlertStep.NotifyUsers']]
      AlertInstruction: $[dependencies.ConfigAlertJob.outputs['configAlertStep.AlertInstruction']]
    pool: server
    timeoutInMinutes: 4320 # job times out in 3 days
    steps:
    - template: .azure-pipelines/templates/AlertTask.yml
- stage: Build
  dependsOn: GenerateCode
  condition: succeeded()
  jobs:
  - job: build
    steps:
    - template: .azure-pipelines/templates/BeforeTask.yml
- stage: MockTest
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: MockTest
    steps:
    - script: echo 'MockTest'
    displayName: MockTest
- stage: LiveTest
  dependsOn: MockTest
  condition: succeeded()
  jobs:
  - job: LiveTest
    steps:
    - script: echo 'LiveTest'
    displayName: LiveTest
- stage: SubmitStage
  dependsOn: LiveTest
  condition: succeeded()
  jobs:
  - job: submit
    steps:
    - script: echo 'submit code to code repo'
  # - job: confirm
  #   dependsOn: submit
  #   condition: succeeded()
  #   displayName: confirm submit or customize
  #   variables:
  #     NotifyUsers: "chunyu@microsoft.com"
  #     AlertInstruction: "Please confirm if you want to submit the code or need to customize it."
  #   pool: server
  #   timeoutInMinutes: 4320 # job times out in 3 days
  #   steps:
  #   - template: .azure-pipelines/templates/ConfirmTask.yml
  - job: confirm
    dependsOn: submit
    condition: succeeded()
    displayName: confirm submit or customize
    steps:
    - script: |
        codePRNumber=22
        codePR="https://github.com/Azure/depth-coverage-pipeline/pull/$(codePRNumber}"
        triggerPR="https://github.com/Azure/depth-coverage-pipeline/pull/$(System.PullRequest.PullRequestNumber)"
        submitURL="http://$(CodegenApp_Server):$(CodegenApp_Port)/DepthCoverage/Trigger"
        customizeURL="http://$(CodegenApp_Server):$(CodegenApp_Port)/DepthCoverage/Trigger"
        body=&(python script/onboard.py "Onboarding" "$(codePR)" "$(triggerPR)" "$(submitURL)" "$(customizeURL)")
        echo $(body)
        from_mail=$(username)
        to_mail="chunyu@microsoft.com"
        
        sudo pip install wheel
        sudo pip install sendgrid
        echo $(python script/sendGridemail.py "$(body)" "$(to_mail)" "Depth-coverage onboarding" "$(API_KEY)")
      displayName: "send confirm email"
