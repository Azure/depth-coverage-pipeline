# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
- name: PIPELINE_ORG
  value: Azure
- name: PIPELINE_REPO
  value: depth-coverage-pipeline
- name: PULL_NUMBER
  value: $(System.PullRequest.PullRequestNumber)
- name: ResourceProvider
  value: empty
- name: Resource
  value: ""
- name: ResourceMapJson
  value: ""
- name: ResourceMapFile
  value: ToGenerate.json

stages:
- stage: setup
  jobs:
  - job: RetrieveResourceConfig
    steps:
    - script: |
        sudo npm install -g az-depth-coverage --unsafe-perm=true --allow-root
        sudo apt-get install jq -y
    - script: |
        depthcoverage --token=$(PIPELINE_TOKEN) --org=$(PIPELINE_ORG) --repo=$(PIPELINE_REPO) --operation=readPR --PRNumber=6
        rp=`jq .RPName $(ResourceMapFile)`
        echo $rp
        echo '##vso[task.setvariable variable=ResourceProvider]rp'
        echo $(ResourceProvider)
# - stage: GenerateCode
#   jobs:
#   - job: Generate
#     variables:
#     - name: TASK_KEY
#       value: GenerateCode
#     steps:
#     - script: |
#         echo $pwd
#         echo $(PULLNUMBER)
#         # az login --service-principal -u $(SERVICE_PRINCIPE_ID) -p $(SERVICE_PRINCIPE_SECRET) --tenant $(SERVICE_PRINCIPE_TENANT)
#         # az storage blob upload -c dcblob -f azure-pipelines.yml -n $(BLOBName) --subscription $(SERVICE_PRINCIPE_SUBSCRIPTION) --account-name=depthcoverage
#         # az storage blob download -c dcblob -f azure-pipelines-2.yml -n $(BLOBName) --subscription $(SERVICE_PRINCIPE_SUBSCRIPTION) --account-name=depthcoverage
#         ls -l
#     - script: echo Hello, world!
#       displayName: 'Run a one-line script'
#     - template: .azure-pipelines/templates/AfterTask.yml
# - stage: Build
#   jobs:
#   - job: build
#     steps:
#     - template: .azure-pipelines/templates/BeforeTask.yml